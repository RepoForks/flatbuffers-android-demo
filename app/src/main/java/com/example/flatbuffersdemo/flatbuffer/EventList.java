package com.example.flatbuffersdemo.flatbuffer;// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class EventList extends Table {
  public static EventList getRootAsEventList(ByteBuffer _bb) { return getRootAsEventList(_bb, new EventList()); }
  public static EventList getRootAsEventList(ByteBuffer _bb, EventList obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public EventList __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Event event(int j) { return event(new Event(), j); }
  public Event event(Event obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int eventLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createEventList(FlatBufferBuilder builder,
      int eventOffset) {
    builder.startObject(1);
    EventList.addEvent(builder, eventOffset);
    return EventList.endEventList(builder);
  }

  public static void startEventList(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addEvent(FlatBufferBuilder builder, int eventOffset) { builder.addOffset(0, eventOffset, 0); }
  public static int createEventVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEventVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEventList(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishEventListBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

